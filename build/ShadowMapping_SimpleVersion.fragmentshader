#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 ShadowCoord;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2DShadow shadowMap;

void main(){

	// Light emission properties
	vec3 LightColor = vec3(1,1,1);
	vec3 MaterialDiffuseColor = vec3(1,0,0);
	vec3 ambiantLight = vec3(0.3,0,0);

	//vec3 coord = vec3(ShadowCoord.xyz/ShadowCoord.w);
    //float depth = texture( shadowMap, vec3(coord.xy,coord.z+0.001));
	//float visibility = depth;
	float bias = 0.005;
	//float visibility = 1.0;
	float shadow == texture( shadowMap, vec3(ShadowCoord.xy, (ShadowCoord.z-bias)/ShadowCoord.w) );//return a float because we've used a Shadow Sampler


	//float closestDepth = texture(shadowMap, ShadowCoord.xy).r;
	//float currentDepth = ShadowCoord.z - bias;
	//float shadow = currentDepth > closestDepth ? 1.0 : 0.1;


	color = ambiantLight + shadow * MaterialDiffuseColor * LightColor;

}